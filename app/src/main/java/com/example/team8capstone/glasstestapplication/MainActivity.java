package com.example.team8capstone.glasstestapplication;

import com.google.android.glass.media.Sounds;
import com.google.android.glass.view.WindowUtils;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.media.AudioManager;
import android.os.Environment;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.os.Bundle;

import java.io.File;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class MainActivity extends Activity {

    /** {@link CardScrollView} to use as the main content view. */
    private CardScrollView mCardScroller;

    private int mPicture = 0;

    private String mMovieDirectory;

    private boolean mVoiceMenuEnabled = true;

    /** "Hello World!" {@link View} generated by {@link #buildView()}. */
    private View mView;

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        mView = buildView();
        mMovieDirectory = Environment.getExternalStorageDirectory()+"/"+Environment.DIRECTORY_MOVIES;

        // Requests a voice menu on this activity. As for any other window feature,
        // be sure to request this before setContentView() is called
        getWindow().requestFeature(WindowUtils.FEATURE_VOICE_COMMANDS);

        // Ensure screen stays on during demo.
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }

            @Override
            public Object getItem(int position) {
                return mView;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return mView;
            }

            @Override
            public int getPosition(Object item) {
                if (mView.equals(item)) {mPicture = 0;
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }
        });
        // Handle the TAP event.
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // Plays sound.
                AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                am.playSoundEffect(Sounds.TAP);
                // Toggles voice menu. Invalidates menu to flag change.
                mVoiceMenuEnabled = !mVoiceMenuEnabled;
                getWindow().invalidatePanelMenu(WindowUtils.FEATURE_VOICE_COMMANDS);
            }
        });
        setContentView(mCardScroller);

        /*String path = mMovieDirectory+"/"+"Wildlife_512kb.mp4";
        File file = new File(path);
        if (!file.exists()) {
            return;
        }*/

        /*Intent i = new Intent();
        i.setAction("com.google.glass.action.VIDEOPLAYER");
        i.putExtra("video_url", path);
        startActivity(i);*/
    }

    @Override
    protected void onResume() {
        super.onResume();
        mCardScroller.activate();
    }

    @Override
    protected void onPause() {
        mCardScroller.deactivate();
        super.onPause();
    }

    @Override
    public boolean onCreatePanelMenu(int featureId, Menu menu) {
        if (featureId == WindowUtils.FEATURE_VOICE_COMMANDS) {
            getMenuInflater().inflate(R.menu.voice_menu, menu);
            return true;
        }
        // Good practice to pass through, for options menu.
        return super.onCreatePanelMenu(featureId, menu);
    }

    @Override
    public boolean onPreparePanel(int featureId, View view, Menu menu) {
        if (featureId == WindowUtils.FEATURE_VOICE_COMMANDS) {
            // Dynamically decides between enabling/disabling voice menu.
            return mVoiceMenuEnabled;
        }
        // Good practice to pass through, for options menu.
        return super.onPreparePanel(featureId, view, menu);
    }

    @Override
    public boolean onMenuItemSelected(int featureId, MenuItem item) {
        if (featureId == WindowUtils.FEATURE_VOICE_COMMANDS) {
            switch (item.getItemId()) {
                case R.id.menu_designer:
                    mPicture = 0;
                    String path = mMovieDirectory+"/"+"Wildlife_512kb.mp4";
                    File file = new File(path);
                    if (!file.exists()) {
                        break;
                    }

                    Intent i = new Intent();
                    i.setAction("com.google.glass.action.VIDEOPLAYER");
                    i.putExtra("video_url", path);
                    startActivity(i);
                    break;
                case R.id.menu_coder1:   mPicture = 1; break;
                case R.id.menu_coder2:   mPicture = 2; break;
                case R.id.menu_coder3:   mPicture = 3; break;
                case R.id.menu_coder4:   mPicture = 4; break;
                case R.id.menu_coder5:   mPicture = 5; break;
                case R.id.menu_product:  mPicture = 6; break;
                default: return true;  // No change.
            }
            //mCardScroller.setAdapter(new CardAdapter(createCards(this)));
            return true;
        }
        return super.onMenuItemSelected(featureId, item);
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class.
     */
    private View buildView() {
        //CardBuilder card = new CardBuilder(this, CardBuilder.Layout.TEXT);

        //card.setText(R.string.hello_world);

        CardBuilder card = new CardBuilder(this, CardBuilder.Layout.TEXT)
                .setText("Text card text not fixed")
                .setFootnote("Text card footnote")
                .setTimestamp("Text card timestamp");

        return card.getView();
    }

    /** Returns current image resource. */
    private int getImageResource() {
        switch (mPicture) {
            case 1:  return R.drawable.codemonkey1;
            case 2:  return R.drawable.codemonkey2;
            case 3:  return R.drawable.codemonkey3;
            case 4:  return R.drawable.codemonkey4;
            case 5:  return R.drawable.codemonkey5;
            case 6:  return R.drawable.product;
            default: return R.drawable.designer;
        }
    }

}
